`

1.Internally Git uses a Hashing Mechanism and a tree like Structure to Manage The Changes on The Folder 
When Ever a change is added a Hash is generated for that change and then the data is stored against that Hash
each hash is generated by the SHA 1 hashing algorithm and is in hexadecimal format and is of 40 bits 


2. The Changes are also not Stored directly like the data is Stored in format of blob (Binary Large Object) it Contains a header that has type of file that is blob 
and the size and the body contains the data that is allocated against that hash and a delimiter this helps as the file is minimized so that the changes don't take that 
much space 


3.There is a folder inside the git folder known as the objects 
    In This folder the files which were added in the Staging Area are or a full folder commited is added 
    so each time a file is staged a hash is generated by SHA1 and then the first two character of the 40character hash are taken and then 
    made as a folder and the rest of the hash is kept as the file name 
     
    and to access the content of a file that is staged through git we have to use a special command 
    git cat-file <full-40-digit-Hash>-> as directly using the cat command on the hash only gives us the largeBinaryObject (Commpressed) Form of that file that is 
    Not Human Readable 

    we can Print the thinks inside the Hash file by using the -p flag with the cat-file command
    git cat-file -p <full-40-digit-Hash -> To Print The content of the Object to the Hash is generated For
    git cat-file -t <full-40-digit-Hash -> To get The type of Object the HashCode was Generated For  


4.The Git Uses Tree/Graph DataStructure to keep Tracks of the head in Git a Folder is reffered to as tree and a file as blob the tree has various blobs inside it 
so it is like a directory having a sub directory 

Imagine Yourself a folder with a file and a folder inside it and that inner folder has another file inside it 
so
when we Stage the file we have all the files generated with a hash but when we commit the changes we have a Hash that is reffering to the inner folder that contains the
details about the inner folder that is the file that were inside that at the time of commit and the HashCode that reffers to this gives us the type tree

but when we commit another HashCode is generated that refferse to the commit that we made it contains auther name time of commit and all and the tyoe of object the hash
code reffers to is also commit 

`

